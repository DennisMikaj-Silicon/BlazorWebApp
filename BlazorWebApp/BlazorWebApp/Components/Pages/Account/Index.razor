@page "/Account/Manage"
@attribute [StreamRendering]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorWebApp.Data
@using Microsoft.AspNetCore.Mvc

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Profile</PageTitle>

@if (!string.IsNullOrEmpty(@StatusMessage))
{
	<div class="alert alert-danger">
		@StatusMessage
	</div>
}

@if (user == null)
{
	<p>Loading...</p>
}
else
{
	<div class="container">
		<section id="account-details">


				<div class="details">
				<section class="basic-info">
					<EditForm FormName="inputform" Model="Input" OnValidSubmit="SaveInfo" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
						<h2>Account Details</h2>
						<h5>Basic Info</h5>
						<DataAnnotationsValidator />

						<div class="content">
							<div id="form-firstname" class="input-group">
								<label>First Name</label>
								<InputText @bind-Value="@Input.FirstName" placeholder="@user.FirstName" />
							</div>

							<div id="form-lastname" class="input-group">
								<label >Last Name</label>
								<InputText @bind-Value="@Input.LastName" placeholder="@user.LastName" />
							</div>

							<div id="form-email" class="input-group">
								<label>Email</label>
								<InputText @bind-Value="@Input.Email" placeholder="@user.Email" />
							</div>


							<div id="form-bio" class="input-group">
								<label>Bio <span>(optional)</span></label>
								<InputTextArea @bind-Value="@Input.Biography" placeholder="@user.Biography" />
							</div>

							<div class="form-buttons">
								<button class="btn-gray" type="reset">Cancel</button>
								<button class="btn-theme" type="submit">Save changes</button>
							</div>

						</div>

					</EditForm>

				</section>
				<hr />
				<section class="address-info">
					@* <EditForm FormName="addressform" Model="AddressForm" OnValidSubmit="SaveAddress" asp-route-returnUrl="@ReturnUrl" method="post" novalidate>
						<h2>Address</h2>
						<div class="content">
							<div id="form-addressline-1" class="input-group">
								<label asp-for="AddressForm.AddressLine_1"></label>
								<InputText @bind-Value="@AddressForm.AddressLine_1" placeholder="@userAddress.AddressLine_1" />
							</div>
							<div id="form-addressline-2" class="input-group">
								<label asp-for="AddressForm.AddressLine_2"></label>
								<InputText @bind-Value="@AddressForm.AddressLine_2" placeholder="@userAddress.AddressLine_2" />
							</div>
							<div id="form-postalcode" class="input-group">
								<label asp-for="AddressForm.PostalCode"></label>
								<InputText @bind-Value="@AddressForm.PostalCode" placeholder="@userAddress.PostalCode" />
							</div>
							<div id="form-city" class="input-group">
								<label asp-for="AddressForm.City"></label>
								<InputText @bind-Value="@AddressForm.City" placeholder="@userAddress.City" />
							</div>
							<div class="form-buttons">
								<button class="btn-gray" type="reset">Cancel</button>
								<button class="btn-theme" type="submit">Save changes</button>
							</div>
						</div>
					</EditForm> *@
				</section>
			</div>

		</section>
	</div>
}






@code {
	[Parameter]
	public ApplicationUser user { get; set; } = default!;

	[Parameter]
	public UserAddress userAddress { get; set; } = default!;

	[SupplyParameterFromQuery]
	public string StatusMessage { get; set; } = "";

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	[SupplyParameterFromForm]
	public InputModel Input { get; set; } = new();


	[SupplyParameterFromForm]
	public AddressFormModel AddressForm { get; set; } = new();

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			await Task.Delay(1000);
			user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
		}
		catch (Exception ex)
		{
			Logger.LogError(ex.Message);
		}

	}

	public async Task SaveInfo(EditContext editContext)
	{
		if (Input != null)
		{
			if (Input.FirstName != null && Input.LastName != null && Input.Email != null)
			{

				var user = await UserManager.GetUserAsync(HttpContext.User);
				if (user != null)
				{
					user.FirstName = Input.FirstName;
					user.LastName = Input.LastName;
					user.Email = Input.Email;
					user.Biography = Input.Biography;

					var result = await UserManager.UpdateAsync(user);
					if (!result.Succeeded)
					{
						StatusMessage = "Failed to update information.";
						StateHasChanged();
					}
					NavigationManager.NavigateTo("/Account/Manage");
				}
			}
		}



	}


	public async Task SaveAddress(EditContext editContext)
	{
		try
		{
			var user = await UserManager.GetUserAsync(HttpContext.User);
			if (user != null)
			{
				if (userAddress == null)
				{
					userAddress = new UserAddress();
				}

				userAddress.AddressLine_1 = AddressForm.AddressLine_1;
				userAddress.AddressLine_2 = AddressForm.AddressLine_2;
				userAddress.City = AddressForm.City;
				userAddress.PostalCode = AddressForm.PostalCode;

				var result = await UserManager.UpdateAsync(user);
				if (!result.Succeeded)
				{
					StatusMessage = "Failed to update address information.";
					StateHasChanged();
				}
				else
				{
					NavigationManager.NavigateTo("/Account/Manage");

				}
			}
		}
		catch (Exception ex)
		{
			var errorMessage = $"Failed to update address information: {ex.Message}";
			Logger.LogError(errorMessage);
		}

	}

	public class AddressFormModel
	{
		[DataType(DataType.Text)]
		[Display(Name = "Address Line 1", Prompt = "Enter your address line", Order = 0)]
		public string AddressLine_1 { get; set; } = null!;



		[Display(Name = "Address Line 2 (optional)", Prompt = "Enter your second address line", Order = 1)]
		public string? AddressLine_2 { get; set; }


		[Display(Name = "Postal code", Prompt = "Enter your postal code", Order = 2)]
		[DataType(DataType.PostalCode)]
		public string PostalCode { get; set; } = null!;


		[DataType(DataType.Text)]
		[Display(Name = "City", Prompt = "Enter your city", Order = 3)]
		public string City { get; set; } = null!;
	}

	public class InputModel
    {
		public string? FirstName { get; set; }
		public string? LastName { get; set; }
		public string? Email { get; set; }
		public string? Biography { get; set; }
    }
}
