@page "/course-details/{id}"
@using BlazorWebApp.Client.Models
@using System.Text.Json
@inject HttpClient Http

<link href="/coursedetails.css" rel="stylesheet" />


@if (course == null)
{
    <p class="text-center"><em>Loading Course...</em></p>
}
else
{
    <div class="inside-image">
        <div class="row justify-content-start">
            @if (course.IsBestseller)
            {
                <p class="best-seller col-4">Best Seller</p>
            }
            @if (course.IsDigital)
            {
                <p class="col-4 digital">Digital</p>
            }
        </div>
        <img src="@course.ImageHeaderUri" alt="@course.Title" class="course-image" />
        <div class="inside-text">
            <h1>@course.Title</h1>
            <p>@course.Ingress</p>
            <div>
            @for (int i = 0; i < course.StarRating; i++)
            {
                <i class="fa-solid fa-star"></i>
            }
            @for (int i = course.StarRating; i < 5; i++)
            {
                <i class="fa-regular fa-star"></i>
            }
                <span>(@course.Reviews)</span>
                <div class="vr"></div>
                <span>@course.Likes Likes</span>
                <div class="vr"></div>
                <span>@course.Hours</span>

            </div>
        </div>
    </div>

    <div>
        @course.Description
    </div>
}










@code {
    [Parameter]
    public string Id { get; set; }
    public CourseModel course;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
            {
                Query = $"{{getCourseById(id: \"{Id}\") {{id isBestSeller title authors{{name}} prices{{price discount}} starRating reviews ingress hours likesInPercent likes imageHeaderUri isDigital content {{description includes}} }}}}"
            };
        var response = await Http.PostAsJsonAsync("http://localhost:7241/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var courseElement = result?.Data.GetProperty("getCourseById");

            if (courseElement.HasValue)
            {
                course = new CourseModel
                    {
                        Id = courseElement.Value.GetProperty("id").GetString(),
                        IsBestseller = courseElement.Value.GetProperty("isBestSeller").GetBoolean(),
                        IsDigital = courseElement.Value.GetProperty("isDigital").GetBoolean(),
                        ImageHeaderUri = courseElement.Value.GetProperty("imageHeaderUri").GetString(),
                        Description = courseElement.Value.GetProperty("content").GetProperty("description").GetString(),
                        Title = courseElement.Value.GetProperty("title").GetString(),
                        Reviews = courseElement.Value.GetProperty("reviews").GetString(),
                        StarRating = courseElement.Value.GetProperty("starRating").GetInt32(),

                        Ingress = courseElement.Value.GetProperty("ingress").GetString(),
                        Author = GetFirstAuthor(courseElement.Value.GetProperty("authors")),
                        Price = GetFirstPrice(courseElement.Value.GetProperty("prices")),
                        Discount = GetFirstDiscount(courseElement.Value.GetProperty("prices")),
                        Hours = courseElement.Value.GetProperty("hours").GetString(),
                        Likes = courseElement.Value.GetProperty("likes").GetString(),
                        LikesInPercent = courseElement.Value.GetProperty("likesInPercent").GetString(),
                        Includes = courseElement.Value.GetProperty("content").GetProperty("includes")
            .EnumerateArray()
            .Select(x => x.GetString()!)
            .ToList()
                    };
            }
        }
    }

    private string GetFirstAuthor(JsonElement authorsElement)
    {
        if (authorsElement.ValueKind == JsonValueKind.Array)
        {
            return authorsElement.EnumerateArray().First().GetProperty("name").GetString()!;
        }
        else if (authorsElement.ValueKind == JsonValueKind.Object)
        {
            return authorsElement.GetProperty("name").GetString()!;
        }
        return string.Empty;
    }

    private decimal GetFirstPrice(JsonElement pricesElement)
    {
        if (pricesElement.ValueKind == JsonValueKind.Array)
        {
            return pricesElement.EnumerateArray().First().GetProperty("price").GetDecimal();
        }
        else if (pricesElement.ValueKind == JsonValueKind.Object)
        {
            return pricesElement.GetProperty("price").GetDecimal();
        }
        return 0m;
    }

    private decimal GetFirstDiscount(JsonElement pricesElement)
    {
        if (pricesElement.ValueKind == JsonValueKind.Array)
        {
            return pricesElement.EnumerateArray().First().GetProperty("discount").GetDecimal();
        }
        else if (pricesElement.ValueKind == JsonValueKind.Object)
        {
            return pricesElement.GetProperty("discount").GetDecimal();
        }
        return 0m;
    }

    public class CourseModel
    {
        [Key]
        public string? Id { get; set; }
        public string? Title { get; set; }
        public string? ImageHeaderUri { get; set; }
        public string? Author { get; set; }
        public string? Description { get; set; }
        public string? Ingress { get; set; }
        public string? Reviews { get; set; }
        public List<string>? Includes { get; set; }
        public int StarRating { get; set; }
        public bool IsDigital { get; set; }
        public bool IsBestseller { get; set; }
        public string? Hours { get; set; }
        public Decimal Price { get; set; }
        public Decimal Discount { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Likes { get; set; }
    }
}
