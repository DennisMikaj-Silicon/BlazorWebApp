@using BlazorWebApp.Client.Models
@using System.Text.Json
@attribute [StreamRendering]
@inject HttpClient Http


<section>
	<div class="container">
		<nav class="breadcrumbs">
			<a href="/"><i class=" fa-solid fa-house"></i>Home</a>
			<i class="fa-solid fa-angles-right"></i>
			<a href="/courses" class="active">Courses</a>
		</nav>
		<div class="title">
			<h1>Courses</h1>
			<div class="dropdown">
				<select>
					<option value="all" disabled selected>All Categories</option>
				</select>
			</div>
			<div class="searchbar">
				<input type="text" placeholder="Search courses">
				<span><i class="fa-solid fa-magnifying-glass"></i></span>
			</div>
		</div>
		<div class="course-grid">
			@if (courses == null)
			{
				<p class="text-center"><em>Attempting to find courses...</em></p>
			}
			else
			{
				@foreach (var course in courses)
				{
					<div class="course-content">
						<div class="inside-image">
							@if (course.IsBestseller)
							{
								<p class="best-seller">Best Seller</p>
							}
							<NavLink href="@( $"course-details/{course.Id}" )">
								<img src="@course.ImageUri" alt="@course.Id" class="course-image" />
							</NavLink>
							<div class="bookmark">
								<a class="btn-circle-sm btn-circle bookmark" asp-action="Join" asp-controller="Courses"><i class="fa-regular fa-bookmark"></i></a>
							</div>
						</div>
						<h6>@course.Title</h6>
						<p>@course.Author</p>

						@if (course.Discount > 0)
						{
							<p class="price-sale">$@course.Discount<span>$@course.Price</span></p>
						}
						else
						{

							<p class="price">$@course.Price</p>
						}


						<hr />
						<div class="bottom">
							<p><i class="fa-regular fa-clock"></i>@course.Hours Hours</p>
							<p><i class="fa-regular fa-thumbs-up"></i>@course.LikesInPercent% (@course.Likes K)</p>
						</div>
					</div>
				}
			


		<ul class="pagination">
			<li><a href="#"><i class="fa-solid fa-arrow-left"></i></a></li>
			<li><a href="#">1</a></li>
			<li><a href="#">2</a></li>
			<li><a href="#">3</a></li>
			<li><a href="#">4</a></li>
			<li><a href="#"><i class="fa-solid fa-arrow-right"></i></a></li>

		</ul>
	
			}
				</div>
			</div>
</section>


<section>
	<div class="container">
		<div class="bottom-section">
			<div class="text-section">
				<p>Ready to get started?</p>
				<h2>Take Your <span>Skills</span> to the<br /> Next Level</h2>
				<button class="btn-theme">Work with us</button>
			</div>
			<div>
				<img src="/images/illustration.svg" alt="illustration image" />
			</div>

		</div>

	</div>


</section>


@code {
	public CourseModel[]? courses;

	protected override async Task OnInitializedAsync()
	{

		var query = new GraphQLQuery { Query = "{getAllCourses {id isBestSeller title authors{name} prices{price discount} hours likesInPercent likes imageUri}}" };
		var response = await Http.PostAsJsonAsync("http://localhost:7241/api/graphql", query);

		if(response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
			courses = result?.Data.GetProperty("getAllCourses").EnumerateArray()
				.Select(course => new CourseModel
					{
						Id = course.GetProperty("id").GetString(),
						IsBestseller = course.GetProperty("isBestSeller").GetBoolean(),
						ImageUri = course.GetProperty("imageUri").GetString(),
						Title = course.GetProperty("title").GetString(),
						Author = GetFirstAuthor(course.GetProperty("authors")),
						Price = GetFirstPrice(course.GetProperty("prices")),
						Discount = GetFirstDiscount(course.GetProperty("prices")),
						Hours = course.GetProperty("hours").GetString(),
						Likes = course.GetProperty("likes").GetString(),
						LikesInPercent = course.GetProperty("likesInPercent").GetString()
					})
			.ToArray();
		}
	}

	private string GetFirstAuthor(JsonElement authorsElement)
	{
		if (authorsElement.ValueKind == JsonValueKind.Array)
		{
			return authorsElement.EnumerateArray().First().GetProperty("name").GetString();
		}
		else if (authorsElement.ValueKind == JsonValueKind.Object)
		{
			return authorsElement.GetProperty("name").GetString();
		}
		return string.Empty;
	}

	private decimal GetFirstPrice(JsonElement pricesElement)
	{
		if (pricesElement.ValueKind == JsonValueKind.Array)
		{
			return pricesElement.EnumerateArray().First().GetProperty("price").GetDecimal();
		}
		else if (pricesElement.ValueKind == JsonValueKind.Object)
		{
			return pricesElement.GetProperty("price").GetDecimal();
		}
		return 0m;
	}

	private decimal GetFirstDiscount(JsonElement pricesElement)
	{
		if (pricesElement.ValueKind == JsonValueKind.Array)
		{
			return pricesElement.EnumerateArray().First().GetProperty("discount").GetDecimal();
		}
		else if (pricesElement.ValueKind == JsonValueKind.Object)
		{
			return pricesElement.GetProperty("discount").GetDecimal();
		}
		return 0m;
	}

	public class CourseModel
	{
		[Key]
		public string? Id { get; set; }
		public string? Title { get; set; }
		public string? ImageUri { get; set; }
		public string? Author { get; set; }
		public bool IsBestseller { get; set; }
		public string? Hours { get; set; }
		public Decimal Price { get; set; }
		public Decimal Discount { get; set; }
		public string? LikesInPercent { get; set; }
		public string? Likes { get; set; }
	}
}